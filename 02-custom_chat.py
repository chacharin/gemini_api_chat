import google.generativeai as genai

# --- กำหนดค่าคอนฟิกที่จำเป็นสำหรับการใช้งานไลบรารี ---
API_KEY = "คีย์ที่ได้จาก google ai studio"  # กำหนด API Key สำหรับเชื่อมต่อกับบริการ Google Generative AI
SYSTEM_INSTRUCTION = "คุณเป็นสุดยอดเกษตรกรที่มีความสามารถมากในการปลูกพืชผักสวนครัว โปรดให้คำแนะนำฉันเป็นภาษาไทย"  # กำหนดบทบาทของโมเดลให้ตอบในฐานะเกษตรกรผู้เชี่ยวชาญ
GENERATION_CONFIG =  {"temperature": 0.7}  # กำหนดค่าการสุ่มของการสร้างข้อความ (ยิ่งค่าสูง ยิ่งสร้างสรรค์)

# ตั้งค่าไลบรารีด้วย API Key ที่กำหนดไว้ เพื่อให้สามารถเรียกใช้งานโมเดลได้
genai.configure(api_key=API_KEY)

# --- เริ่มต้นใช้โมเดลพร้อมกำหนดบทบาทและค่าการสร้างข้อความ ---
# สร้างอ็อบเจกต์โมเดลด้วยชื่อโมเดล, คำสั่งระบบ และค่าคอนฟิกการสร้างข้อความ
model = genai.GenerativeModel(
    model_name='gemini-1.5-flash',  # เลือกใช้โมเดล Gemini รุ่น 1.5 Flash
    system_instruction=SYSTEM_INSTRUCTION,  # ส่งคำสั่งระบบเพื่อกำหนดบทบาทการตอบ
    generation_config=GENERATION_CONFIG  # ส่งค่าคอนฟิกสำหรับการสร้างข้อความ
)

# เริ่มต้นเซสชันแชทใหม่ โดย history=[] หมายถึงยังไม่มีประวัติการสนทนา
chat = model.start_chat(history=[])

# แสดงข้อความแจ้งผู้ใช้เกี่ยวกับบทบาทของโมเดลและวิธีการออกจากโปรแกรม
print(f"กำลังสนทนากับ Gemini (บทบาท: {SYSTEM_INSTRUCTION})")
print("พิมพ์ 'quit' เพื่อออกจากโปรแกรม...")
print("-" * 20)  # แสดงเส้นแบ่งเพื่อความชัดเจน

# วนลูปรับข้อความจากผู้ใช้ทีละบรรทัด และส่งไปที่โมเดลเพื่อรับคำตอบ
while (prompt := input("คุณ: ").strip().lower()) != 'quit':  # รับข้อความจากผู้ใช้และแปลงเป็นตัวพิมพ์เล็กเพื่อตรวจสอบคำว่า 'quit'
    if not prompt:  # ถ้าผู้ใช้กด Enter โดยไม่พิมพ์ข้อความ จะข้ามไปยังรอบถัดไป
        continue
    try:
        # ส่งข้อความของผู้ใช้ไปยังโมเดลเพื่อให้โมเดลตอบกลับ
        response = chat.send_message(prompt)
        # แสดงผลคำตอบที่ได้รับจากโมเดล Gemini
        print(f"Gemini: {response.text}")
    except Exception as chat_error:
        # กรณีเกิดข้อผิดพลาดระหว่างการส่งข้อความ (เช่น อินเทอร์เน็ตขัดข้อง หรือเนื้อหาถูกบล็อก)
        print(f"\nเกิดข้อผิดพลาดขณะส่งข้อความ: {chat_error}")
        print("กรุณาลองใหม่อีกครั้ง.")
    print("-" * 20)  # แสดงเส้นแบ่งเพื่อความชัดเจนหลังจบแต่ละรอบ

# เมื่อผู้ใช้พิมพ์ 'quit' โปรแกรมจะออกจากลูปและแสดงข้อความจบการสนทนา
print("\nจบการสนทนาแล้ว.")
